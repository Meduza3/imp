# reading file
# parsing program...		# parsed. 
# generating TAC...		# Generating node of type *ast.Program
# Generating node of type *ast.Main
# Generating node of type *ast.IfCommand
# Generating node of type *ast.WriteCommand
# WRI1TE WRITE 1
# generated. 
# Translating TAC...		
# ins:  goto main
# ins:  main: if== 17, 17 goto L1
# ins:  goto L2
# ins:  L1: write 1
# ins:  L2: halt
SET 1 # declaring constant 1
STORE 100
SET 17 # declaring constant 17
STORE 101
JUMP 1 # goto main
LOAD 101
SUB 101
JZERO 2 # to main
JUMP 2 # goto L2
PUT 100
HALT # halt
# ==main==
# 1 = &{1 CONSTANT 100 false 0 0 0 0 0}
# 17 = &{17 CONSTANT 101 false 0 0 0 0 0}
