// Code generated by goyacc -o parser.go -p Yy parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"github.com/Meduza3/imp/ast"
	"github.com/Meduza3/imp/token"
	"strconv"
)

func atoi(s string) int64 {
	i, err := strconv.ParseInt(s, 10, 64)
	if err != nil {
		// Handle error appropriately
		return 0
	}
	return i
}

//line parser.y:21
type YySymType struct {
	yys          int
	token        *token.Token
	program      *ast.ProgramAll
	procedures   []*ast.Procedure
	main         *ast.Main
	statements   []ast.Statement
	statement    ast.Statement
	expression   ast.Expression
	expressions  []ast.Expression
	identifier   ast.Expression
	integer      int64
	condition    ast.Expression
	value        ast.Expression
	declarations []ast.Declaration
	arg_decls    []*ast.ArgDeclaration
	args         []ast.Expression
	proc_call    *ast.ProcedureCallStatement
	proc_head    *ast.ProcHead
	arg_decl     *ast.ArgDeclaration
}

const ILLEGAL = 57346
const EOF = 57347
const PROCEDURE = 57348
const IS = 57349
const BEGIN = 57350
const END = 57351
const PROGRAM = 57352
const ASSIGN = 57353
const SEMICOLON = 57354
const IF = 57355
const THEN = 57356
const ELSE = 57357
const ENDIF = 57358
const WHILE = 57359
const DO = 57360
const ENDWHILE = 57361
const REPEAT = 57362
const UNTIL = 57363
const FOR = 57364
const FROM = 57365
const TO = 57366
const DOWNTO = 57367
const ENDFOR = 57368
const READ = 57369
const WRITE = 57370
const LPAREN = 57371
const RPAREN = 57372
const COMMA = 57373
const LBRACKET = 57374
const RBRACKET = 57375
const COLON = 57376
const T = 57377
const PLUS = 57378
const MINUS = 57379
const MULT = 57380
const DIVIDE = 57381
const MODULO = 57382
const EQUALS = 57383
const NEQUALS = 57384
const GE = 57385
const LE = 57386
const GEQ = 57387
const LEQ = 57388
const NUM = 57389
const PIDENTIFIER = 57390

var YyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ILLEGAL",
	"EOF",
	"PROCEDURE",
	"IS",
	"BEGIN",
	"END",
	"PROGRAM",
	"ASSIGN",
	"SEMICOLON",
	"IF",
	"THEN",
	"ELSE",
	"ENDIF",
	"WHILE",
	"DO",
	"ENDWHILE",
	"REPEAT",
	"UNTIL",
	"FOR",
	"FROM",
	"TO",
	"DOWNTO",
	"ENDFOR",
	"READ",
	"WRITE",
	"LPAREN",
	"RPAREN",
	"COMMA",
	"LBRACKET",
	"RBRACKET",
	"COLON",
	"T",
	"PLUS",
	"MINUS",
	"MULT",
	"DIVIDE",
	"MODULO",
	"EQUALS",
	"NEQUALS",
	"GE",
	"LE",
	"GEQ",
	"LEQ",
	"NUM",
	"PIDENTIFIER",
}

var YyStatenames = [...]string{}

const YyEofCode = 1
const YyErrCode = 2
const YyInitialStackSize = 16

//line parser.y:502

//line yacctab:1
var YyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const YyPrivate = 57344

const YyLast = 302

var YyAct = [...]int{
	22, 45, 47, 24, 80, 79, 23, 25, 43, 118,
	26, 15, 27, 21, 83, 78, 131, 29, 30, 12,
	47, 50, 41, 66, 67, 68, 69, 70, 71, 34,
	60, 46, 46, 38, 48, 41, 52, 46, 31, 41,
	49, 18, 39, 59, 37, 7, 120, 57, 24, 46,
	41, 13, 25, 106, 17, 26, 105, 27, 41, 13,
	84, 130, 29, 30, 56, 81, 124, 44, 86, 87,
	88, 89, 90, 46, 46, 46, 46, 46, 46, 91,
	46, 46, 99, 31, 119, 104, 98, 103, 54, 55,
	62, 55, 41, 46, 46, 46, 46, 46, 53, 41,
	101, 102, 35, 36, 33, 32, 10, 74, 19, 127,
	64, 116, 117, 126, 42, 72, 65, 115, 85, 76,
	75, 51, 41, 46, 46, 9, 121, 20, 4, 41,
	41, 20, 5, 11, 92, 93, 94, 95, 96, 97,
	128, 129, 100, 14, 8, 6, 28, 77, 16, 63,
	3, 2, 1, 0, 107, 108, 109, 110, 111, 24,
	0, 112, 113, 25, 0, 0, 26, 0, 27, 0,
	0, 0, 24, 29, 30, 125, 25, 0, 0, 26,
	0, 27, 0, 0, 122, 123, 29, 30, 0, 24,
	0, 0, 0, 25, 31, 114, 26, 82, 27, 0,
	0, 24, 0, 29, 30, 25, 0, 31, 26, 0,
	27, 0, 0, 24, 0, 29, 30, 25, 0, 0,
	26, 73, 27, 0, 31, 0, 61, 29, 30, 0,
	24, 0, 0, 0, 25, 0, 31, 26, 58, 27,
	0, 0, 24, 0, 29, 30, 25, 0, 31, 26,
	40, 27, 0, 0, 24, 0, 29, 30, 25, 0,
	0, 26, 0, 27, 0, 31, 24, 0, 29, 30,
	25, 0, 0, 26, 0, 27, 0, 31, 0, 0,
	29, 30, 0, 0, 0, 0, 0, 0, 0, 31,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 31,
}

var YyPact = [...]int{
	-1000, -1000, 122, -1000, -3, 137, 118, 77, 11, 3,
	6, 100, 253, 73, 96, 253, 72, -1000, -4, 253,
	-6, 241, -1000, 103, -46, -46, 253, -27, 109, -28,
	-46, 59, 17, 253, 229, -1000, -5, -1000, 217, 58,
	-1000, -1000, -46, 102, -18, -1000, -1000, 57, 97, 200,
	84, -1000, 108, 107, -33, -43, 31, 188, -1000, -1000,
	-34, -1000, 13, 106, 32, 253, -46, -46, -46, -46,
	-46, -46, 253, -46, -46, -1000, -1000, 70, -1000, 54,
	52, 9, -1000, -1000, 19, -1000, -46, -46, -46, -46,
	-46, 146, -1000, -1000, -1000, -1000, -1000, -1000, 176, 105,
	87, -1000, -39, -1000, -1000, 51, -1, -1000, -1000, -1000,
	-1000, -1000, 253, -1000, -1000, -1000, -46, -46, -1000, -1000,
	33, 159, 95, 91, -1000, -1000, 253, 253, 35, -10,
	-1000, -1000,
}

var YyPgo = [...]int{
	0, 152, 151, 150, 13, 0, 149, 8, 67, 6,
	133, 148, 147, 146, 145,
}

var YyR1 = [...]int{
	0, 1, 2, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 14,
	13, 10, 10, 10, 10, 11, 11, 11, 11, 12,
	12, 6, 6, 6, 6, 6, 6, 7, 7, 7,
	7, 7, 7, 8, 8, 9, 9, 9,
}

var YyR2 = [...]int{
	0, 2, 8, 7, 0, 6, 5, 2, 1, 4,
	7, 5, 5, 5, 9, 9, 2, 3, 3, 4,
	4, 3, 8, 1, 6, 3, 4, 1, 2, 3,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 4, 4,
}

var YyChk = [...]int{
	-1000, -1, -2, -3, 6, 10, -14, 48, 7, 7,
	29, -10, 8, 48, -10, 8, -11, 48, 35, 8,
	31, -4, -5, -9, 13, 17, 20, 22, -13, 27,
	28, 48, 32, 8, -4, 30, 31, 48, -4, 48,
	9, -5, 11, -7, -8, 47, -9, 48, -7, -4,
	48, 12, -9, -8, 29, 32, 47, -4, 9, 48,
	35, 9, 32, -6, -8, 14, 41, 42, 43, 44,
	45, 46, 18, 21, 23, 12, 12, -12, 48, 48,
	47, 34, 9, 48, 47, 12, 36, 37, 38, 39,
	40, -4, -8, -8, -8, -8, -8, -8, -4, -7,
	-8, 30, 31, 33, 33, 47, 34, -8, -8, -8,
	-8, -8, 15, 16, 19, 12, 24, 25, 48, 33,
	47, -4, -8, -8, 33, 16, 18, 18, -4, -4,
	26, 26,
}

var YyDef = [...]int{
	4, -2, 0, 1, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 23, 0, 0, 0, 27, 0, 0,
	0, 0, 8, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 0, 0, 0, 19, 0, 28, 0, 21,
	6, 7, 0, 0, 0, 43, 44, 45, 0, 0,
	0, 16, 0, 0, 0, 0, 0, 0, 3, 25,
	0, 5, 0, 0, 31, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 17, 18, 0, 30, 0,
	0, 0, 2, 26, 0, 9, 0, 0, 0, 0,
	0, 0, 37, 38, 39, 40, 41, 42, 0, 0,
	0, 20, 0, 46, 47, 0, 0, 32, 33, 34,
	35, 36, 0, 11, 12, 13, 0, 0, 29, 24,
	0, 0, 0, 0, 22, 10, 0, 0, 0, 0,
	14, 15,
}

var YyTok1 = [...]int{
	1,
}

var YyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48,
}

var YyTok3 = [...]int{
	0,
}

var YyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	YyDebug        = 0
	YyErrorVerbose = false
)

type YyLexer interface {
	Lex(lval *YySymType) int
	Error(s string)
}

type YyParser interface {
	Parse(YyLexer) int
	Lookahead() int
}

type YyParserImpl struct {
	lval  YySymType
	stack [YyInitialStackSize]YySymType
	char  int
}

func (p *YyParserImpl) Lookahead() int {
	return p.char
}

func YyNewParser() YyParser {
	return &YyParserImpl{}
}

const YyFlag = -1000

func YyTokname(c int) string {
	if c >= 1 && c-1 < len(YyToknames) {
		if YyToknames[c-1] != "" {
			return YyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func YyStatname(s int) string {
	if s >= 0 && s < len(YyStatenames) {
		if YyStatenames[s] != "" {
			return YyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func YyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !YyErrorVerbose {
		return "syntax error"
	}

	for _, e := range YyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + YyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := YyPact[state]
	for tok := TOKSTART; tok-1 < len(YyToknames); tok++ {
		if n := base + tok; n >= 0 && n < YyLast && YyChk[YyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if YyDef[state] == -2 {
		i := 0
		for YyExca[i] != -1 || YyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; YyExca[i] >= 0; i += 2 {
			tok := YyExca[i]
			if tok < TOKSTART || YyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if YyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += YyTokname(tok)
	}
	return res
}

func Yylex1(lex YyLexer, lval *YySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = YyTok1[0]
		goto out
	}
	if char < len(YyTok1) {
		token = YyTok1[char]
		goto out
	}
	if char >= YyPrivate {
		if char < YyPrivate+len(YyTok2) {
			token = YyTok2[char-YyPrivate]
			goto out
		}
	}
	for i := 0; i < len(YyTok3); i += 2 {
		token = YyTok3[i+0]
		if token == char {
			token = YyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = YyTok2[1] /* unknown char */
	}
	if YyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", YyTokname(token), uint(char))
	}
	return char, token
}

func YyParse(Yylex YyLexer) int {
	return YyNewParser().Parse(Yylex)
}

func (Yyrcvr *YyParserImpl) Parse(Yylex YyLexer) int {
	var Yyn int
	var YyVAL YySymType
	var YyDollar []YySymType
	_ = YyDollar // silence set and not used
	YyS := Yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Yystate := 0
	Yyrcvr.char = -1
	Yytoken := -1 // Yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Yystate = -1
		Yyrcvr.char = -1
		Yytoken = -1
	}()
	Yyp := -1
	goto Yystack

ret0:
	return 0

ret1:
	return 1

Yystack:
	/* put a state and value onto the stack */
	if YyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", YyTokname(Yytoken), YyStatname(Yystate))
	}

	Yyp++
	if Yyp >= len(YyS) {
		nyys := make([]YySymType, len(YyS)*2)
		copy(nyys, YyS)
		YyS = nyys
	}
	YyS[Yyp] = YyVAL
	YyS[Yyp].yys = Yystate

Yynewstate:
	Yyn = YyPact[Yystate]
	if Yyn <= YyFlag {
		goto Yydefault /* simple state */
	}
	if Yyrcvr.char < 0 {
		Yyrcvr.char, Yytoken = Yylex1(Yylex, &Yyrcvr.lval)
	}
	Yyn += Yytoken
	if Yyn < 0 || Yyn >= YyLast {
		goto Yydefault
	}
	Yyn = YyAct[Yyn]
	if YyChk[Yyn] == Yytoken { /* valid shift */
		Yyrcvr.char = -1
		Yytoken = -1
		YyVAL = Yyrcvr.lval
		Yystate = Yyn
		if Errflag > 0 {
			Errflag--
		}
		goto Yystack
	}

Yydefault:
	/* default state action */
	Yyn = YyDef[Yystate]
	if Yyn == -2 {
		if Yyrcvr.char < 0 {
			Yyrcvr.char, Yytoken = Yylex1(Yylex, &Yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if YyExca[xi+0] == -1 && YyExca[xi+1] == Yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Yyn = YyExca[xi+0]
			if Yyn < 0 || Yyn == Yytoken {
				break
			}
		}
		Yyn = YyExca[xi+1]
		if Yyn < 0 {
			goto ret0
		}
	}
	if Yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Yylex.Error(YyErrorMessage(Yystate, Yytoken))
			Nerrs++
			if YyDebug >= 1 {
				__yyfmt__.Printf("%s", YyStatname(Yystate))
				__yyfmt__.Printf(" saw %s\n", YyTokname(Yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Yyp >= 0 {
				Yyn = YyPact[YyS[Yyp].yys] + YyErrCode
				if Yyn >= 0 && Yyn < YyLast {
					Yystate = YyAct[Yyn] /* simulate a shift of "error" */
					if YyChk[Yystate] == YyErrCode {
						goto Yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if YyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", YyS[Yyp].yys)
				}
				Yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if YyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", YyTokname(Yytoken))
			}
			if Yytoken == YyEofCode {
				goto ret1
			}
			Yyrcvr.char = -1
			Yytoken = -1
			goto Yynewstate /* try again in the same state */
		}
	}

	/* reduction by production Yyn */
	if YyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Yyn, YyStatname(Yystate))
	}

	Yynt := Yyn
	Yypt := Yyp
	_ = Yypt // guard against "declared and not used"

	Yyp -= YyR2[Yyn]
	// Yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if Yyp+1 >= len(YyS) {
		nyys := make([]YySymType, len(YyS)*2)
		copy(nyys, YyS)
		YyS = nyys
	}
	YyVAL = YyS[Yyp+1]

	/* consult goto table to find next state */
	Yyn = YyR1[Yyn]
	Yyg := YyPgo[Yyn]
	Yyj := Yyg + YyS[Yyp].yys + 1

	if Yyj >= YyLast {
		Yystate = YyAct[Yyg]
	} else {
		Yystate = YyAct[Yyj]
		if YyChk[Yystate] != -Yyn {
			Yystate = YyAct[Yyg]
		}
	}
	// dummy call; replaced with literal code
	switch Yynt {

	case 1:
		YyDollar = YyS[Yypt-2 : Yypt+1]
//line parser.y:81
		{
			YyVAL.program = &ast.ProgramAll{
				Procedures: YyDollar[1].procedures,
				Main:       YyDollar[2].main,
			}
		}
	case 2:
		YyDollar = YyS[Yypt-8 : Yypt+1]
//line parser.y:91
		{
			YyVAL.procedures = append(YyDollar[1].procedures, &ast.Procedure{
				Token:        YyDollar[2].token,
				Head:         YyDollar[3].proc_head,
				Declarations: YyDollar[5].declarations,
				Commands:     YyDollar[7].statements,
			})
		}
	case 3:
		YyDollar = YyS[Yypt-7 : Yypt+1]
//line parser.y:100
		{
			YyVAL.procedures = append(YyDollar[1].procedures, &ast.Procedure{
				Token:        YyDollar[2].token,
				Head:         YyDollar[3].proc_head,
				Declarations: nil,
				Commands:     YyDollar[6].statements,
			})
		}
	case 4:
		YyDollar = YyS[Yypt-0 : Yypt+1]
//line parser.y:109
		{
			YyVAL.procedures = []*ast.Procedure{}
		}
	case 5:
		YyDollar = YyS[Yypt-6 : Yypt+1]
//line parser.y:116
		{
			YyVAL.main = &ast.Main{
				Token:        YyDollar[1].token,
				Declarations: YyDollar[3].declarations,
				Commands:     YyDollar[5].statements,
			}
		}
	case 6:
		YyDollar = YyS[Yypt-5 : Yypt+1]
//line parser.y:124
		{
			YyVAL.main = &ast.Main{
				Token:        YyDollar[1].token,
				Declarations: nil,
				Commands:     YyDollar[4].statements,
			}
		}
	case 7:
		YyDollar = YyS[Yypt-2 : Yypt+1]
//line parser.y:135
		{
			YyVAL.statements = append(YyDollar[1].statements, YyDollar[2].statement)
		}
	case 8:
		YyDollar = YyS[Yypt-1 : Yypt+1]
//line parser.y:139
		{
			YyVAL.statements = []ast.Statement{YyDollar[1].statement}
		}
	case 9:
		YyDollar = YyS[Yypt-4 : Yypt+1]
//line parser.y:146
		{
			YyVAL.statement = &ast.AssignmentStatement{
				Token: YyDollar[2].token,
				Left:  YyDollar[1].identifier,
				Right: YyDollar[3].expression,
			}
		}
	case 10:
		YyDollar = YyS[Yypt-7 : Yypt+1]
//line parser.y:154
		{
			YyVAL.statement = &ast.IfStatement{
				Token:       YyDollar[1].token,
				Condition:   YyDollar[2].condition,
				Consequence: YyDollar[4].statements,
				Alternative: YyDollar[6].statements,
			}
		}
	case 11:
		YyDollar = YyS[Yypt-5 : Yypt+1]
//line parser.y:163
		{
			YyVAL.statement = &ast.IfStatement{
				Token:       YyDollar[1].token,
				Condition:   YyDollar[2].condition,
				Consequence: YyDollar[4].statements,
				Alternative: nil,
			}
		}
	case 12:
		YyDollar = YyS[Yypt-5 : Yypt+1]
//line parser.y:172
		{
			YyVAL.statement = &ast.WhileStatement{
				Token:     YyDollar[1].token,
				Condition: YyDollar[2].condition,
				Body:      YyDollar[4].statements,
			}
		}
	case 13:
		YyDollar = YyS[Yypt-5 : Yypt+1]
//line parser.y:180
		{
			YyVAL.statement = &ast.RepeatStatement{
				Token:     YyDollar[1].token,
				Body:      YyDollar[2].statements,
				Condition: YyDollar[4].condition,
			}
		}
	case 14:
		YyDollar = YyS[Yypt-9 : Yypt+1]
//line parser.y:188
		{
			YyVAL.statement = &ast.ForStatement{
				Token:    YyDollar[1].token,
				Iterator: &ast.Identifier{Token: YyDollar[2].token, Value: YyDollar[2].token.Literal},
				From:     YyDollar[4].value,
				To:       YyDollar[6].value,
				DownTo:   false,
				Body:     YyDollar[8].statements,
			}
		}
	case 15:
		YyDollar = YyS[Yypt-9 : Yypt+1]
//line parser.y:199
		{
			YyVAL.statement = &ast.ForStatement{
				Token:    YyDollar[1].token,
				Iterator: &ast.Identifier{Token: YyDollar[2].token, Value: YyDollar[2].token.Literal},
				From:     YyDollar[4].value,
				To:       YyDollar[6].value,
				DownTo:   true,
				Body:     YyDollar[8].statements,
			}
		}
	case 16:
		YyDollar = YyS[Yypt-2 : Yypt+1]
//line parser.y:210
		{
			YyVAL.statement = YyDollar[1].proc_call
		}
	case 17:
		YyDollar = YyS[Yypt-3 : Yypt+1]
//line parser.y:214
		{
			YyVAL.statement = &ast.ReadStatement{
				Token:      YyDollar[1].token,
				Identifier: YyDollar[2].identifier,
			}
		}
	case 18:
		YyDollar = YyS[Yypt-3 : Yypt+1]
//line parser.y:221
		{
			YyVAL.statement = &ast.WriteStatement{
				Token: YyDollar[1].token,
				Value: YyDollar[2].value,
			}
		}
	case 19:
		YyDollar = YyS[Yypt-4 : Yypt+1]
//line parser.y:231
		{
			YyVAL.proc_head = &ast.ProcHead{
				Name:     &ast.Identifier{Token: YyDollar[1].token, Value: YyDollar[1].token.Literal},
				ArgsDecl: YyDollar[3].arg_decls,
			}
		}
	case 20:
		YyDollar = YyS[Yypt-4 : Yypt+1]
//line parser.y:241
		{
			YyVAL.proc_call = &ast.ProcedureCallStatement{
				Token:     YyDollar[1].token,
				Name:      &ast.Identifier{Token: YyDollar[1].token, Value: YyDollar[1].token.Literal},
				Arguments: YyDollar[3].args,
			}
		}
	case 21:
		YyDollar = YyS[Yypt-3 : Yypt+1]
//line parser.y:252
		{
			ident := &ast.Identifier{Token: YyDollar[3].token, Value: YyDollar[3].token.Literal}
			YyVAL.declarations = append(YyDollar[1].declarations, &ast.VarDeclaration{
				Token: YyDollar[3].token,
				Name:  ident,
			})
		}
	case 22:
		YyDollar = YyS[Yypt-8 : Yypt+1]
//line parser.y:260
		{
			fromVal := &ast.IntegerLiteral{Token: YyDollar[5].token, Value: atoi(YyDollar[5].token.Literal)}
			toVal := &ast.IntegerLiteral{Token: YyDollar[7].token, Value: atoi(YyDollar[7].token.Literal)}
			YyVAL.declarations = append(YyDollar[1].declarations, &ast.ArrayDeclaration{
				Token: YyDollar[3].token,
				Name:  &ast.Identifier{Token: YyDollar[3].token, Value: YyDollar[3].token.Literal},
				From:  fromVal,
				To:    toVal,
			})
		}
	case 23:
		YyDollar = YyS[Yypt-1 : Yypt+1]
//line parser.y:271
		{
			YyVAL.declarations = []ast.Declaration{
				&ast.VarDeclaration{
					Token: YyDollar[1].token,
					Name:  &ast.Identifier{Token: YyDollar[1].token, Value: YyDollar[1].token.Literal},
				},
			}
		}
	case 24:
		YyDollar = YyS[Yypt-6 : Yypt+1]
//line parser.y:280
		{
			fromVal := &ast.IntegerLiteral{Token: YyDollar[3].token, Value: atoi(YyDollar[3].token.Literal)}
			toVal := &ast.IntegerLiteral{Token: YyDollar[5].token, Value: atoi(YyDollar[5].token.Literal)}
			YyVAL.declarations = []ast.Declaration{
				&ast.ArrayDeclaration{
					Token: YyDollar[1].token,
					Name:  &ast.Identifier{Token: YyDollar[1].token, Value: YyDollar[1].token.Literal},
					From:  fromVal,
					To:    toVal,
				},
			}
		}
	case 25:
		YyDollar = YyS[Yypt-3 : Yypt+1]
//line parser.y:296
		{
			arg := &ast.ArgDeclaration{
				Token: YyDollar[3].token,
				Name:  &ast.Identifier{Token: YyDollar[3].token, Value: YyDollar[3].token.Literal},
				Type:  "",
			}
			YyVAL.arg_decls = append(YyDollar[1].arg_decls, arg)
		}
	case 26:
		YyDollar = YyS[Yypt-4 : Yypt+1]
//line parser.y:305
		{
			arg := &ast.ArgDeclaration{
				Token: YyDollar[4].token,
				Name:  &ast.Identifier{Token: YyDollar[4].token, Value: YyDollar[4].token.Literal},
				Type:  "T",
			}
			YyVAL.arg_decls = append(YyDollar[1].arg_decls, arg)
		}
	case 27:
		YyDollar = YyS[Yypt-1 : Yypt+1]
//line parser.y:314
		{
			YyVAL.arg_decls = []*ast.ArgDeclaration{
				&ast.ArgDeclaration{
					Token: YyDollar[1].token,
					Name:  &ast.Identifier{Token: YyDollar[1].token, Value: YyDollar[1].token.Literal},
					Type:  "",
				},
			}
		}
	case 28:
		YyDollar = YyS[Yypt-2 : Yypt+1]
//line parser.y:324
		{
			YyVAL.arg_decls = []*ast.ArgDeclaration{
				&ast.ArgDeclaration{
					Token: YyDollar[2].token,
					Name:  &ast.Identifier{Token: YyDollar[2].token, Value: YyDollar[2].token.Literal},
					Type:  "T",
				},
			}
		}
	case 29:
		YyDollar = YyS[Yypt-3 : Yypt+1]
//line parser.y:337
		{
			expr := &ast.Identifier{Token: YyDollar[3].token, Value: YyDollar[3].token.Literal}
			YyVAL.args = append(YyDollar[1].args, expr)
		}
	case 30:
		YyDollar = YyS[Yypt-1 : Yypt+1]
//line parser.y:342
		{
			YyVAL.args = []ast.Expression{
				&ast.Identifier{Token: YyDollar[1].token, Value: YyDollar[1].token.Literal},
			}
		}
	case 31:
		YyDollar = YyS[Yypt-1 : Yypt+1]
//line parser.y:351
		{
			YyVAL.expression = YyDollar[1].value
		}
	case 32:
		YyDollar = YyS[Yypt-3 : Yypt+1]
//line parser.y:355
		{
			YyVAL.expression = &ast.BinaryExpression{
				Token:    YyDollar[2].token,
				Left:     YyDollar[1].value,
				Operator: "+",
				Right:    YyDollar[3].value,
			}
		}
	case 33:
		YyDollar = YyS[Yypt-3 : Yypt+1]
//line parser.y:364
		{
			YyVAL.expression = &ast.BinaryExpression{
				Token:    YyDollar[2].token,
				Left:     YyDollar[1].value,
				Operator: "-",
				Right:    YyDollar[3].value,
			}
		}
	case 34:
		YyDollar = YyS[Yypt-3 : Yypt+1]
//line parser.y:373
		{
			YyVAL.expression = &ast.BinaryExpression{
				Token:    YyDollar[2].token,
				Left:     YyDollar[1].value,
				Operator: "*",
				Right:    YyDollar[3].value,
			}
		}
	case 35:
		YyDollar = YyS[Yypt-3 : Yypt+1]
//line parser.y:382
		{
			YyVAL.expression = &ast.BinaryExpression{
				Token:    YyDollar[2].token,
				Left:     YyDollar[1].value,
				Operator: "/",
				Right:    YyDollar[3].value,
			}
		}
	case 36:
		YyDollar = YyS[Yypt-3 : Yypt+1]
//line parser.y:391
		{
			YyVAL.expression = &ast.BinaryExpression{
				Token:    YyDollar[2].token,
				Left:     YyDollar[1].value,
				Operator: "%",
				Right:    YyDollar[3].value,
			}
		}
	case 37:
		YyDollar = YyS[Yypt-3 : Yypt+1]
//line parser.y:403
		{
			YyVAL.condition = &ast.BinaryExpression{
				Token:    YyDollar[2].token,
				Left:     YyDollar[1].value,
				Operator: "==",
				Right:    YyDollar[3].value,
			}
		}
	case 38:
		YyDollar = YyS[Yypt-3 : Yypt+1]
//line parser.y:412
		{
			YyVAL.condition = &ast.BinaryExpression{
				Token:    YyDollar[2].token,
				Left:     YyDollar[1].value,
				Operator: "!=",
				Right:    YyDollar[3].value,
			}
		}
	case 39:
		YyDollar = YyS[Yypt-3 : Yypt+1]
//line parser.y:421
		{
			YyVAL.condition = &ast.BinaryExpression{
				Token:    YyDollar[2].token,
				Left:     YyDollar[1].value,
				Operator: ">",
				Right:    YyDollar[3].value,
			}
		}
	case 40:
		YyDollar = YyS[Yypt-3 : Yypt+1]
//line parser.y:430
		{
			YyVAL.condition = &ast.BinaryExpression{
				Token:    YyDollar[2].token,
				Left:     YyDollar[1].value,
				Operator: "<",
				Right:    YyDollar[3].value,
			}
		}
	case 41:
		YyDollar = YyS[Yypt-3 : Yypt+1]
//line parser.y:439
		{
			YyVAL.condition = &ast.BinaryExpression{
				Token:    YyDollar[2].token,
				Left:     YyDollar[1].value,
				Operator: ">=",
				Right:    YyDollar[3].value,
			}
		}
	case 42:
		YyDollar = YyS[Yypt-3 : Yypt+1]
//line parser.y:448
		{
			YyVAL.condition = &ast.BinaryExpression{
				Token:    YyDollar[2].token,
				Left:     YyDollar[1].value,
				Operator: "<=",
				Right:    YyDollar[3].value,
			}
		}
	case 43:
		YyDollar = YyS[Yypt-1 : Yypt+1]
//line parser.y:460
		{
			YyVAL.value = &ast.IntegerLiteral{
				Token: YyDollar[1].token,
				Value: atoi(YyDollar[1].token.Literal),
			}
		}
	case 44:
		YyDollar = YyS[Yypt-1 : Yypt+1]
//line parser.y:467
		{
			YyVAL.value = YyDollar[1].identifier
		}
	case 45:
		YyDollar = YyS[Yypt-1 : Yypt+1]
//line parser.y:474
		{
			YyVAL.identifier = &ast.Identifier{
				Token: YyDollar[1].token,
				Value: YyDollar[1].token.Literal,
			}
		}
	case 46:
		YyDollar = YyS[Yypt-4 : Yypt+1]
//line parser.y:481
		{
			name := &ast.Identifier{Token: YyDollar[1].token, Value: YyDollar[1].token.Literal}
			index := &ast.Identifier{Token: YyDollar[3].token, Value: YyDollar[3].token.Literal}
			YyVAL.identifier = &ast.ArrayAccess{
				Token:     YyDollar[2].token,
				ArrayName: name,
				Index:     index,
			}
		}
	case 47:
		YyDollar = YyS[Yypt-4 : Yypt+1]
//line parser.y:491
		{
			name := &ast.Identifier{Token: YyDollar[1].token, Value: YyDollar[1].token.Literal}
			index := &ast.IntegerLiteral{Token: YyDollar[3].token, Value: atoi(YyDollar[3].token.Literal)}
			YyVAL.identifier = &ast.ArrayAccess{
				Token:     YyDollar[2].token,
				ArrayName: name,
				Index:     index,
			}
		}
	}
	goto Yystack /* stack new state and value */
}
